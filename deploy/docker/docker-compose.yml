services:
  mongo:
    image: mongo:7.0
    container_name: mortimer-mongo
    restart: unless-stopped
    env_file:
      - .env
    command:
      - "--auth"
      - "--bind_ip_all"
      - "--wiredTigerCacheSizeGB=1"
    volumes:
      - ./mongo-data:/data/db
      - ./initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 })'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - mortimer-internal

  mortimer-app:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile
    image: mortimer-app:latest
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - mortimer-internal
      - mortimer-edge
    ports:
      - "${MORTIMER_APP_PORT:-8000}:8000"
    volumes:
      - ./mortimer-logs:/app/log
      - ./mortimer-instance:/app/instance
    healthcheck:
      test:
        - "CMD-SHELL"
        - |
          python -c "import sys, urllib.request; sys.exit(0 if urllib.request.urlopen('http://127.0.0.1:8000/login').status < 500 else 1)"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

volumes:
  mongo-data:
    name: mortimer-mongo-data
  mortimer-static:
    name: mortimer-static
  mortimer-uploads:
    name: mortimer-uploads
  mortimer-logs:
    name: mortimer-logs
  mortimer-instance:
    name: mortimer-instance

networks:
  mortimer-internal:
    name: mortimer-internal
    internal: true
  mortimer-edge:
    name: mortimer-edge
    driver: bridge
