services:
  mongo:
    image: mongo:7.0
    container_name: mortimer-mongo
    restart: unless-stopped
    env_file:
      - .env
    command:
      - "--auth"
      - "--bind_ip_all"
      - "--wiredTigerCacheSizeGB=1"
    volumes:
      - ./mongo-data:/data/db
      - ./initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 })'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - mortimer-internal

  mortimer-app:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile
    image: mortimer-app:latest
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - mortimer-internal
      - mortimer-edge
    volumes:
      - mortimer-static:/opt/venv/lib/python3.13/site-packages/mortimer/static:ro
      - mortimer-uploads:/app/uploads
      - ./mortimer-logs:/app/log
      - ./mortimer-instance:/app/instance
    expose:
      - "8001"
      - "8002"
      - "8003"
      - "8004"
      - "8005"
      - "8006"
      - "8007"
      - "8008"
      - "8009"
      - "8010"
      - "8011"
      - "8012"
    healthcheck:
      test:
        - "CMD-SHELL"
        - |
          python -c "import sys, urllib.request; sys.exit(0 if urllib.request.urlopen('http://127.0.0.1:8001/login').status < 500 else 1)"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

  mortimer-nginx:
    image: nginx:alpine
    depends_on:
      mortimer-app:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    environment:
      # required / switchable
      TLS_MODE: ${TLS_MODE}                      # letsencrypt | off
      SERVER_NAME: ${SERVER_NAME}
      UPSTREAM_BACKENDS: ${UPSTREAM_BACKENDS}
      # only used when TLS_MODE=letsencrypt
      SSL_FULLCHAIN_PATH: ${SSL_FULLCHAIN_PATH}
      SSL_PRIVKEY_PATH: ${SSL_PRIVKEY_PATH}
      # optional tuning (defaults exist in entrypoint.sh)
      CLIENT_MAX_BODY_SIZE: ${CLIENT_MAX_BODY_SIZE}
      PROXY_READ_TIMEOUT: ${PROXY_READ_TIMEOUT}
      PROXY_SEND_TIMEOUT: ${PROXY_SEND_TIMEOUT}
      PROXY_CONNECT_TIMEOUT: ${PROXY_CONNECT_TIMEOUT}
      PROXY_BUFFERING: ${PROXY_BUFFERING}
      RATE_LIMIT_REQS: ${RATE_LIMIT_REQS}
      RATE_LIMIT_BURST: ${RATE_LIMIT_BURST}
      LOG_FORMAT: ${LOG_FORMAT}
      ENABLE_WEBSOCKETS: ${ENABLE_WEBSOCKETS}
    entrypoint: ["/bin/sh","/etc/nginx/entrypoint.sh"]
    volumes:
      - ./nginx/entrypoint.sh:/etc/nginx/entrypoint.sh:ro
      - ./nginx/templates:/etc/nginx/templates:ro
      - mortimer-static:/srv/mortimer/static:ro
      # optionally, if you want Nginx to serve uploads directly:
      # - mortimer-uploads:/srv/mortimer/uploads:ro
      # Certbot / ACME webroot â€” harmless if TLS_MODE=off
      - certs:/etc/letsencrypt:ro
      - acme-webroot:/var/www/certbot:ro
    networks:
      - mortimer-edge

  nginx-certbot:
    image: certbot/certbot
    profiles: ["tls"]                  # only run when you enable this profile
    volumes:
      - certs:/etc/letsencrypt          # stores certificates
      - acme-webroot:/var/www/certbot   # ACME HTTP-01 challenges
    command: >
      sh -c 'while true;
             do certbot renew --quiet
                  --deploy-hook "nginx -s reload";
             sleep 12h;
             done'
    depends_on:
      - mortimer-nginx
    networks:
      - mortimer-edge

volumes:
  mongo-data:
    name: mortimer-mongo-data
  mortimer-static:
    name: mortimer-static
  mortimer-uploads:
    name: mortimer-uploads
  mortimer-logs:
    name: mortimer-logs
  mortimer-instance:
    name: mortimer-instance
  certs:
  acme-webroot:

networks:
  mortimer-internal:
    name: mortimer-internal
    internal: true
  mortimer-edge:
    name: mortimer-edge
    driver: bridge
